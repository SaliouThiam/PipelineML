name: Deploy Model

on:
  workflow_run:
    workflows: ["Train Model"]
    types:
      - completed
  workflow_dispatch:

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Ensure model exists
      run: |
        if [ ! -f "models/model.pkl" ]; then
          echo "Model not found, training..."
          python src/train.py
        else
          echo "Model found!"
          ls -la models/
        fi
    
    - name: Build Docker image
      run: |
        docker build -t mlops-model:latest .
        echo "‚úÖ Docker image built successfully!"
    
    - name: Test Docker container locally
      run: |
        docker run -d -p 5000:5000 --name test-container mlops-model:latest
        sleep 15
        
        # Test health endpoint
        echo "Testing health endpoint..."
        curl -f http://localhost:5000/health || exit 1
        
        # Test prediction endpoint
        echo "Testing prediction endpoint..."
        response=$(curl -s -X POST http://localhost:5000/predict \
          -H "Content-Type: application/json" \
          -d '{"features": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]}')
        echo "Prediction response: $response"
        
        docker stop test-container
        docker rm test-container
        echo "‚úÖ Local container test successful!"
    
    # Push vers Docker Hub
    - name: Login to DockerHub
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Push to DockerHub
      if: github.ref == 'refs/heads/main'
      run: |
        # Tag avec version et latest
        docker tag mlops-model:latest ${{ secrets.DOCKER_USERNAME }}/mlops-model:latest
        docker tag mlops-model:latest ${{ secrets.DOCKER_USERNAME }}/mlops-model:v${{ github.run_id }}
        
        # Push des deux tags
        docker push ${{ secrets.DOCKER_USERNAME }}/mlops-model:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/mlops-model:v${{ github.run_id }}
        
        echo "‚úÖ Image pushed to Docker Hub!"
        echo "Image: ${{ secrets.DOCKER_USERNAME }}/mlops-model:latest"
        echo "Version: ${{ secrets.DOCKER_USERNAME }}/mlops-model:v${{ github.run_id }}"
    
    # D√©ploiement Render - Version am√©lior√©e
    - name: Deploy to Render
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Triggering Render deployment..."
        response=$(curl -s -w "%{http_code}" -X POST "${{ secrets.RENDER_DEPLOY_HOOK }}")
        http_code="${response: -3}"
        
        if [ "$http_code" -eq 200 ] || [ "$http_code" -eq 201 ]; then
          echo "‚úÖ Render deployment webhook triggered successfully!"
        else
          echo "‚ö†Ô∏è Render webhook response: $response"
          echo "‚ö†Ô∏è HTTP code: $http_code"
        fi
    
    # Test du d√©ploiement avec plus de patience
    - name: Test Render deployment (Background)
      if: github.ref == 'refs/heads/main'
      continue-on-error: true  # Ne pas faire √©chouer le workflow si √ßa prend trop de temps
      run: |
        echo "Testing Render deployment in background..."
        echo "‚è∞ Render deployments can take 5-15 minutes on free tier"
        
        max_attempts=20  # Augment√© √† 20 tentatives (10 minutes)
        attempt=1
        deployment_ready=false
        
        while [ $attempt -le $max_attempts ]; do
          echo "Attempt $attempt/$max_attempts (waiting $(($attempt * 30)) seconds total)"
          
          # Test avec timeout plus court
          if timeout 10 curl -f -s "${{ secrets.RENDER_APP_URL }}/health" > /dev/null 2>&1; then
            echo "‚úÖ Render deployment is live!"
            deployment_ready=true
            
            # Test de pr√©diction
            echo "Testing prediction endpoint..."
            prediction_response=$(timeout 15 curl -s -X POST "${{ secrets.RENDER_APP_URL }}/predict" \
              -H "Content-Type: application/json" \
              -d '{"features": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]}' || echo "timeout")
            
            if [ "$prediction_response" != "timeout" ]; then
              echo "‚úÖ Prediction test successful: $prediction_response"
            else
              echo "‚ö†Ô∏è Prediction test timeout (but health check works)"
            fi
            break
          else
            echo "üîÑ Deployment not ready yet, waiting 30s..."
            sleep 30
            attempt=$((attempt + 1))
          fi
        done
        
        if [ "$deployment_ready" = false ]; then
          echo "‚ö†Ô∏è Render deployment verification timed out after 10 minutes"
          echo "üí° This is normal on Render's free tier - check manually: ${{ secrets.RENDER_APP_URL }}/health"
        fi
    
    # R√©sum√© final
    - name: Deployment Summary
      if: github.ref == 'refs/heads/main'
      run: |
        echo ""
        echo "üöÄ DEPLOYMENT SUMMARY"
        echo "===================="
        echo "‚úÖ Docker Image: ${{ secrets.DOCKER_USERNAME }}/mlops-model:latest"
        echo "‚úÖ Version: v${{ github.run_id }}"
        echo "‚úÖ Render URL: ${{ secrets.RENDER_APP_URL }}"
        echo ""
        echo "üîó ENDPOINTS:"
        echo "   Health: ${{ secrets.RENDER_APP_URL }}/health"
        echo "   Predict: ${{ secrets.RENDER_APP_URL }}/predict"
        echo "   Model Info: ${{ secrets.RENDER_APP_URL }}/model-info"
        echo ""
        echo "üí° Note: If Render verification timed out, check manually in 5-10 minutes"
        echo "   Render free tier can take time to spin up containers"
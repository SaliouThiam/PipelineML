name: Deploy Model

on:
  workflow_run:
    workflows: ["Train Model"]
    types:
      - completed
  workflow_dispatch:

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Ensure model exists
      run: |
        if [ ! -f "models/model.pkl" ]; then
          echo "Model not found, training..."
          python src/train.py
        else
          echo "Model found!"
          ls -la models/
        fi
    
    - name: Build Docker image
      run: |
        docker build -t mlops-model:latest .
        echo "‚úÖ Docker image built successfully!"
    
    - name: Test Docker container locally
      run: |
        docker run -d -p 5000:5000 --name test-container mlops-model:latest
        sleep 15
        
        # Test health endpoint
        echo "Testing health endpoint..."
        curl -f http://localhost:5000/health || exit 1
        
        # Test prediction endpoint
        echo "Testing prediction endpoint..."
        response=$(curl -s -X POST http://localhost:5000/predict \
          -H "Content-Type: application/json" \
          -d '{"features": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]}')
        echo "Prediction response: $response"
        
        docker stop test-container
        docker rm test-container
        echo "‚úÖ Local container test successful!"
    
    # √âtape 1: Push vers Docker Hub
    - name: Login to DockerHub
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Push to DockerHub
      if: github.ref == 'refs/heads/main'
      run: |
        # Tag avec version et latest
        docker tag mlops-model:latest ${{ secrets.DOCKER_USERNAME }}/mlops-model:latest
        docker tag mlops-model:latest ${{ secrets.DOCKER_USERNAME }}/mlops-model:v${{ github.run_id }}
        
        # Push des deux tags
        docker push ${{ secrets.DOCKER_USERNAME }}/mlops-model:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/mlops-model:v${{ github.run_id }}
        
        echo "‚úÖ Image pushed to Docker Hub!"
        echo "Image: ${{ secrets.DOCKER_USERNAME }}/mlops-model:latest"
        echo "Version: ${{ secrets.DOCKER_USERNAME }}/mlops-model:v${{ github.run_id }}"
    
    # √âtape 2: D√©ployer sur Render
    - name: Deploy to Render
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Triggering Render deployment..."
        curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK }}" \
          -H "Content-Type: application/json" \
          -d '{
            "clear_cache": false,
            "image_url": "docker.io/${{ secrets.DOCKER_USERNAME }}/mlops-model:latest"
          }'
        echo "‚úÖ Render deployment triggered!"
    
    # √âtape 3: V√©rifier le d√©ploiement Render
    - name: Wait and test Render deployment
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Waiting for Render deployment to complete..."
        sleep 60  # Attendre que le d√©ploiement se termine
        
        # Tester l'endpoint Render
        echo "Testing Render deployment..."
        max_attempts=10
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          echo "Attempt $attempt/$max_attempts"
          
          if curl -f -s "${{ secrets.RENDER_APP_URL }}/health"; then
            echo "‚úÖ Render deployment successful!"
            
            # Test de pr√©diction sur Render
            echo "Testing prediction on Render..."
            curl -X POST "${{ secrets.RENDER_APP_URL }}/predict" \
              -H "Content-Type: application/json" \
              -d '{"features": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]}'
            
            echo "‚úÖ Production deployment verified!"
            break
          else
            echo "Deployment not ready yet, waiting..."
            sleep 30
            attempt=$((attempt + 1))
          fi
        done
        
        if [ $attempt -gt $max_attempts ]; then
          echo "‚ùå Render deployment verification failed"
          exit 1
        fi
    
    # √âtape 4: Notification (optionnel)
    - name: Deployment Summary
      if: github.ref == 'refs/heads/main'
      run: |
        echo "üöÄ DEPLOYMENT SUMMARY"
        echo "===================="
        echo "‚úÖ Docker Image: ${{ secrets.DOCKER_USERNAME }}/mlops-model:latest"
        echo "‚úÖ Version: v${{ github.run_id }}"
        echo "‚úÖ Render URL: ${{ secrets.RENDER_APP_URL }}"
        echo "‚úÖ Health Check: ${{ secrets.RENDER_APP_URL }}/health"
        echo "‚úÖ Prediction API: ${{ secrets.RENDER_APP_URL }}/predict"